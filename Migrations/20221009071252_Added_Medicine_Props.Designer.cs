// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Neerogilksample.Data;

namespace Neerogilksample.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221009071252_Added_Medicine_Props")]
    partial class Added_Medicine_Props
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Neerogilksample.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DPersonConfirmEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DPersonConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DPersonEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DPersonPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPersonFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPersonLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorConfirmEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharamcyEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyConfirmEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Neerogilksample.Models.DeliveryPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdpicturebackURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdpicturefrontURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LicenseBackPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFrontPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PoliceReportsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedDateLicense")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPersons");
                });

            modelBuilder.Entity("Neerogilksample.Models.DeliveryPerson_Pharmacy", b =>
                {
                    b.Property<int>("DeliveryPersonId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryPersonId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("DeliveryPersonsPharmacies");
                });

            modelBuilder.Entity("Neerogilksample.Models.DigitalPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dateofissue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("DrugProductCategory")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lattiude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longtitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mealperiod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserDoctorId");

                    b.ToTable("DigitalPrescriptions");
                });

            modelBuilder.Entity("Neerogilksample.Models.DigitalPrescription_Pharmacy", b =>
                {
                    b.Property<int>("DigitalPrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("DigitalPrescriptionId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("DigitalPrescriptionsPharmacies");
                });

            modelBuilder.Entity("Neerogilksample.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GraduatedUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GraduatedYear")
                        .HasColumnType("int");

                    b.Property<string>("IdpicturebackURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdpicturefrontURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Medicine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicine6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medides6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NIC")
                        .HasColumnType("int");

                    b.Property<string>("OfficialIDBackPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialIDFrontPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpecialReportsURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedCertificateURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Neerogilksample.Models.Doctor_Pharmacy", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("DoctorsPharmacies");
                });

            modelBuilder.Entity("Neerogilksample.Models.GeneralMedicineProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DigitalPrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("DrugProductCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturedCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufacturedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DigitalPrescriptionId");

                    b.ToTable("GeneralMedicineProducts");
                });

            modelBuilder.Entity("Neerogilksample.Models.GeneralMedicines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrugProductCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturedCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufacturedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductPictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GeneralMedicines");
                });

            modelBuilder.Entity("Neerogilksample.Models.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerUserEmailTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateofIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPersonUserEmailTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("customerDeliveryContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerNametoDeliver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberofUnits1")
                        .HasColumnType("int");

                    b.Property<int>("numberofUnits2")
                        .HasColumnType("int");

                    b.Property<int>("numberofUnits3")
                        .HasColumnType("int");

                    b.Property<int>("numberofUnits4")
                        .HasColumnType("int");

                    b.Property<int>("numberofUnits5")
                        .HasColumnType("int");

                    b.Property<int>("numberofUnits6")
                        .HasColumnType("int");

                    b.Property<double>("price1")
                        .HasColumnType("float");

                    b.Property<double>("price2")
                        .HasColumnType("float");

                    b.Property<double>("price3")
                        .HasColumnType("float");

                    b.Property<double>("price4")
                        .HasColumnType("float");

                    b.Property<double>("price5")
                        .HasColumnType("float");

                    b.Property<double>("price6")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice1")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice2")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice3")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice4")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice5")
                        .HasColumnType("float");

                    b.Property<double>("unitPrice6")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Neerogilksample.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("GeoCoordinatesGoogleLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocatedNearsetCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerIdpicturebackURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerIdpicturefrontURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnersLicenseIDPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnersNIC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacyRegisteredNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyRegistrationCertificatePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyRegistrationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WhatsAppNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Neerogilksample.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Neerogilksample.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neerogilksample.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Neerogilksample.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Neerogilksample.Models.DeliveryPerson_Pharmacy", b =>
                {
                    b.HasOne("Neerogilksample.Models.DeliveryPerson", "DeliveryPerson")
                        .WithMany("DeliveryPersons_Pharmacies")
                        .HasForeignKey("DeliveryPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neerogilksample.Models.Pharmacy", "Pharmacy")
                        .WithMany("DeliveryPersons_Pharmacies")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryPerson");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Neerogilksample.Models.DigitalPrescription", b =>
                {
                    b.HasOne("Neerogilksample.Models.Doctor", "Doctor")
                        .WithMany("DigitalPrescriptions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neerogilksample.Models.ApplicationUser", "UserDoctor")
                        .WithMany()
                        .HasForeignKey("UserDoctorId");

                    b.Navigation("Doctor");

                    b.Navigation("UserDoctor");
                });

            modelBuilder.Entity("Neerogilksample.Models.DigitalPrescription_Pharmacy", b =>
                {
                    b.HasOne("Neerogilksample.Models.DigitalPrescription", "DigitalPrescription")
                        .WithMany("DigitalPrescriptons_Pharmacies")
                        .HasForeignKey("DigitalPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neerogilksample.Models.Pharmacy", "Pharmacy")
                        .WithMany("DigitalPrescriptons_Pharmacies")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalPrescription");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Neerogilksample.Models.Doctor_Pharmacy", b =>
                {
                    b.HasOne("Neerogilksample.Models.Doctor", "Doctor")
                        .WithMany("Doctors_Pharmacies")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Neerogilksample.Models.Pharmacy", "Pharmacy")
                        .WithMany("Doctors_Pharmacies")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("Neerogilksample.Models.GeneralMedicineProducts", b =>
                {
                    b.HasOne("Neerogilksample.Models.DigitalPrescription", "DigitalPrescription")
                        .WithMany("GeneralMedicinesProducts")
                        .HasForeignKey("DigitalPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DigitalPrescription");
                });

            modelBuilder.Entity("Neerogilksample.Models.Orders", b =>
                {
                    b.HasOne("Neerogilksample.Models.ApplicationUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Neerogilksample.Models.DeliveryPerson", b =>
                {
                    b.Navigation("DeliveryPersons_Pharmacies");
                });

            modelBuilder.Entity("Neerogilksample.Models.DigitalPrescription", b =>
                {
                    b.Navigation("DigitalPrescriptons_Pharmacies");

                    b.Navigation("GeneralMedicinesProducts");
                });

            modelBuilder.Entity("Neerogilksample.Models.Doctor", b =>
                {
                    b.Navigation("DigitalPrescriptions");

                    b.Navigation("Doctors_Pharmacies");
                });

            modelBuilder.Entity("Neerogilksample.Models.Pharmacy", b =>
                {
                    b.Navigation("DeliveryPersons_Pharmacies");

                    b.Navigation("DigitalPrescriptons_Pharmacies");

                    b.Navigation("Doctors_Pharmacies");
                });
#pragma warning restore 612, 618
        }
    }
}
